import random
import numpy as np
from sympy.utilities.iterables import multiset_permutations
import networkx as nx

# Global Configuration
generation = 0
initial_select_prob = 0.4
initial_mutate_prob = 0.7
offspring_mutation_prob = 0.5
min_offspring_mutation_prob = 0.05
Crossover_points = 10
min_Crossover_points = 2


# Hamming Distance (I don't know whether we need this or not)
def create_graph(n, d, w):
    networkx_graph = nx.Graph()
    permutations = []
    a = np.zeros(n, dtype=int)
    tmp = w
    for i in range(n):
        if tmp != 0:
            a[i] = 1
            tmp -= 1
        else:
            break
    for p in multiset_permutations(a):
        permutations.append(p)
        networkx_graph.add_node(tuple(p))

    for i in range(0, len(permutations)):
        first_string = permutations[i]
        for j in range(i + 1, len(permutations)):
            second_string = permutations[j]
            hamming_distance = 0
            for k in range(0, n):
                if first_string[k] != second_string[k]:
                    hamming_distance += 1

            if hamming_distance >= d:
                networkx_graph.add_edge(tuple(first_string), tuple(second_string))
    return networkx_graph


# preprocess(reorder in decreasing order of degrees vertices so 0 has highest degree and V-1 lowest)
def preprocess(graph):
    return sorted(graph.degree, key=lambda x: x[0], reverse=True)


# Initial population (constructive heuristic)
# create each chromosome of population as follow
# 1) select Vi randomly and put it in Set A
# 2) select Vj from neighbors[Vi]
# 3) if Vj is connected to all vertices in A mark it as Tabu and add it to A
# 3) Continue to see all neighbors of Vi
# 4) you have Vi which i is from 0 to V-1 so your chromosome is 0-1 vector X which X[i] is 1 for all vertices in A
def initial_population():
    pass


# Number of vertices existing in clique (size of clique)
def fitness():
    pass


# Multipoint Cross over function (starts from 10 point decreases by 2 each 20 generation)
def crossover():
    pass


# Mutation function(Mutating a gene is simply changing it into 1 if it is 0 and vice versa.)
# The two offspring generated by crossover are selected for mutation with probability offspring selection prob.
# If an offspring is selected, it is mutated with a probability offspring mutation prob.
# starts from 0.5 decreases 0.05 each 15 generation till reaching 0.05 value
def mutation():
    pass


# Terminate after reaching specific generation (50 for now)
def termination():
    pass


# Clique Extraction va Improvement
# after cross over and mutation of offspring chromosome are no more clique so we do as follow
def clique_extraction():
    pass


def clique_improvement():
    pass


def main():
    graph = create_graph(7, 4, 3)
    print(nx.degree(graph))
    preprocessed_graph = preprocess(graph)
    while termination():
        pass
        # Select parent();

        # Crossover();

        # Mutation();

        # Extraction

        # Improvement


if __name__ == '__main__':
    main()
